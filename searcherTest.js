// Generated by CoffeeScript 1.7.1
(function() {
  var action_list, checkSpecial, completeSelection, create, getAutoCompleteOptions, getFieldValue, key_list, moveAutoCompleteOptionDown, removeClass, setFieldValue, setSelection, showOptions,
    __slice = [].slice;

  key_list = [
    {
      actualValue: 128,
      listOption: "left ctrl",
      showInList: false
    }, {
      actualValue: 129,
      listOption: "left shift",
      showInList: true
    }, {
      actualValue: 130,
      listOption: "left alt",
      showInList: true
    }, {
      actualValue: 131,
      listOption: "left gui",
      showInList: true
    }, {
      actualValue: 132,
      listOption: "right ctrl",
      showInList: false
    }, {
      actualValue: 133,
      listOption: "right shift",
      showInList: true
    }, {
      actualValue: 134,
      listOption: "right alt",
      showInList: true
    }, {
      actualValue: 135,
      listOption: "right gui",
      showInList: true
    }, {
      actualValue: 218,
      listOption: "up arrow",
      showInList: true
    }, {
      actualValue: 217,
      listOption: "down arrow",
      showInList: true
    }, {
      actualValue: 216,
      listOption: "left arrow",
      showInList: true
    }, {
      actualValue: 215,
      listOption: "right arrow",
      showInList: true
    }, {
      actualValue: 178,
      listOption: "backspace",
      showInList: true
    }, {
      actualValue: 179,
      listOption: "tab",
      showInList: true
    }, {
      actualValue: 176,
      listOption: "return",
      showInList: true
    }, {
      actualValue: 177,
      listOption: "escape",
      showInList: true
    }, {
      actualValue: 209,
      listOption: "insert",
      showInList: true
    }, {
      actualValue: 212,
      listOption: "delete",
      showInList: true
    }, {
      actualValue: 211,
      listOption: "page up",
      showInList: true
    }, {
      actualValue: 214,
      listOption: "page down",
      showInList: true
    }, {
      actualValue: 210,
      listOption: "home",
      showInList: true
    }, {
      actualValue: 213,
      listOption: "end",
      showInList: true
    }, {
      actualValue: 193,
      listOption: "caps lock",
      showInList: true
    }, {
      actualValue: 194,
      listOption: "f1",
      showInList: true
    }, {
      actualValue: 195,
      listOption: "f2",
      showInList: true
    }, {
      actualValue: 196,
      listOption: "f3",
      showInList: true
    }, {
      actualValue: 197,
      listOption: "f4",
      showInList: true
    }, {
      actualValue: 198,
      listOption: "f5",
      showInList: true
    }, {
      actualValue: 199,
      listOption: "f6",
      showInList: true
    }, {
      actualValue: 200,
      listOption: "f7",
      showInList: true
    }, {
      actualValue: 201,
      listOption: "f8",
      showInList: true
    }, {
      actualValue: 202,
      listOption: "f9",
      showInList: true
    }, {
      actualValue: 203,
      listOption: "f10",
      showInList: true
    }, {
      actualValue: 204,
      listOption: "f11",
      showInList: true
    }, {
      actualValue: 205,
      listOption: "f12",
      showInList: true
    }, {
      actualValue: 128,
      listOption: "left control",
      showInList: true
    }, {
      actualValue: 130,
      listOption: "left option",
      showInList: false
    }, {
      actualValue: 131,
      listOption: "left command",
      showInList: false
    }, {
      actualValue: 132,
      listOption: "right control",
      showInList: true
    }, {
      actualValue: 134,
      listOption: "right option",
      showInList: false
    }, {
      actualValue: 135,
      listOption: "right command",
      showInList: false
    }, {
      actualValue: 131,
      listOption: "left windows",
      showInList: false
    }, {
      actualValue: 135,
      listOption: "right windows",
      showInList: false
    }, {
      actualValue: 131,
      listOption: "left super",
      showInList: false
    }, {
      actualValue: 131,
      listOption: "right super",
      showInList: false
    }, {
      actualValue: 176,
      listOption: "enter",
      showInList: true
    }, {
      actualValue: 128,
      listOption: "ctrl",
      showInList: false
    }, {
      actualValue: 129,
      listOption: "shift",
      showInList: true
    }, {
      actualValue: 130,
      listOption: "alt",
      showInList: true
    }, {
      actualValue: 131,
      listOption: "gui",
      showInList: true
    }, {
      actualValue: 128,
      listOption: "control",
      showInList: true
    }, {
      actualValue: 130,
      listOption: "option",
      showInList: true
    }, {
      actualValue: 131,
      listOption: "command",
      showInList: true
    }, {
      actualValue: 131,
      listOption: "windows",
      showInList: true
    }, {
      actualValue: 131,
      listOption: "super",
      showInList: false
    }
  ];

  action_list = [
    {
      actualValue: "h",
      listOption: "hold",
      showInList: true
    }, {
      actualValue: "p",
      listOption: "push",
      showInList: true
    }, {
      actualValue: "r",
      listOption: "release",
      showInList: true
    }
  ];

  window.respondToKeyUp = function(e, form) {
    var lastKey;
    lastKey = window.lastKeyCode;
    window.fieldEntry = getFieldValue(form, "auto_text");
    if (window.fieldEntry.length > 1 && checkSpecial(lastKey)) {
      showOptions(window.fieldEntry);
    }
    if (window.fieldEntry.length < 2) {
      removeClass('results', 'selected');
    }
  };

  window.respondToKeyDown = function(e, form) {
    window.lastKeyCode = e.which;
    window.fieldEntry = getFieldValue(form, "auto_text");
    if (window.optionsFound === true) {
      switch (window.lastKeyCode) {
        case 40:
          moveAutoCompleteOptionDown(true);
          break;
        case 38:
          moveAutoCompleteOptionDown(false);
          break;
        case 39:
          completeSelection(form, "auto_text");
          break;
        default:
          return;
      }
    }
  };

  showOptions = function(searchText) {
    var aFinalOption, completeOptions, completeResult, finalOptions, _i, _j, _len, _len1;
    removeClass('results', 'selected');
    completeOptions = getAutoCompleteOptions(searchText, key_list);
    finalOptions = [];
    for (_i = 0, _len = completeOptions.length; _i < _len; _i++) {
      completeResult = completeOptions[_i];
      finalOptions.push(create("<div class='results'>" + completeResult + "</div>"));
    }
    for (_j = 0, _len1 = finalOptions.length; _j < _len1; _j++) {
      aFinalOption = finalOptions[_j];
      document.body.appendChild(aFinalOption);
    }
    window.optionsFound = finalOptions.length > 0;
    setSelection(0);
  };

  checkSpecial = function(kc) {
    return (kc === 8) || (kc > 45 && kc < 91) || (kc > 95 && kc < 112) || (kc > 185 && kc < 223);
  };

  moveAutoCompleteOptionDown = function(moveDown) {
    if (moveDown) {
      window.counter = window.counter + 1;
    } else {
      window.counter = window.counter - 1;
    }
    setSelection(window.counter);
  };

  completeSelection = function(form, fieldName) {
    var selectedOptions;
    selectedOptions = document.getElementsByClassName('selected');
    return setFieldValue(form, fieldName, selectedOptions[0].textContent);
  };

  setSelection = function(selectionNumber) {
    var allResults, eachSelection, resultSelection, selectedResults, _i, _len;
    selectedResults = document.getElementsByClassName('selected');
    for (_i = 0, _len = selectedResults.length; _i < _len; _i++) {
      eachSelection = selectedResults[_i];
      eachSelection.setAttribute("class", "results");
    }
    allResults = document.getElementsByClassName('results');
    resultSelection = selectionNumber.mod(allResults.length);
    allResults[resultSelection].setAttribute("class", "selected");
  };

  Number.prototype.mod = function(n) {
    return ((this % n) + n) % n;
  };

  getFieldValue = function(form, fieldName) {
    return form[fieldName].value;
  };

  setFieldValue = function(form, fieldName, newValue) {
    form[fieldName].value = newValue;
  };

  removeClass = function() {
    var classToDelete, classesToDelete, resultsToRemove, _i, _len;
    classesToDelete = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = classesToDelete.length; _i < _len; _i++) {
      classToDelete = classesToDelete[_i];
      resultsToRemove = document.getElementsByClassName(classToDelete);
      while (resultsToRemove[0] != null) {
        resultsToRemove[0].parentNode.removeChild(resultsToRemove[0]);
      }
    }
  };

  create = function(htmlStr) {
    var frag;
    frag = document.createDocumentFragment();
    window.temp = document.createElement("div");
    temp.innerHTML = htmlStr;
    while (temp.firstChild) {
      frag.appendChild(temp.firstChild);
    }
    return frag;
  };

  getAutoCompleteOptions = function(searchTerm, resultList) {
    var matchers, searcher, theEntry, _i, _j, _len, _len1;
    searcher = new RegExp('^' + searchTerm, "i");
    matchers = [];
    for (_i = 0, _len = resultList.length; _i < _len; _i++) {
      theEntry = resultList[_i];
      if (searcher.test(theEntry.listOption) === true && theEntry.showInList === true) {
        matchers.push(theEntry.listOption);
      }
    }
    if (matchers.length === 0) {
      for (_j = 0, _len1 = resultList.length; _j < _len1; _j++) {
        theEntry = resultList[_j];
        if (searcher.test(theEntry.listOption) === true) {
          matchers.push(theEntry.listOption);
        }
      }
    }
    return matchers;
  };

}).call(this);
